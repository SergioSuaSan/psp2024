package psp_2024.ZZZ.PRUEBAS.practica_cmd;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;

public class LecturaEscritura {

	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub

		//Para la lectura de comandos del archivo comandos.bat
		FileInputStream fis = new FileInputStream(".\\psp_2024\\ZZZ\\PRUEBAS\\comandos.bat");
		InputStreamReader isr = new InputStreamReader(fis, "UTF-8");
		BufferedReader br = new BufferedReader(isr);
		
		// Para la escritura de los resultados en salida.txt
		FileOutputStream fos = new FileOutputStream("salida.txt");
		OutputStreamWriter osw = new OutputStreamWriter(fos);
		BufferedWriter bw = new BufferedWriter(osw);
		
		//Para la escritura de los resultados de los comandos en error.txt
		FileOutputStream fos_e = new FileOutputStream("salida.txt");
		OutputStreamWriter osw_e = new OutputStreamWriter(fos_e);
		BufferedWriter bw_e = new BufferedWriter(osw_e);
		
		//Cadena en donde se irán guardando las lineas para cada comando
		String linea_com = null;
		
		//Lista de Strings donde se guardarán los tokens de los comandos
		List<String> comando = new  ArrayList<String>();
		
		//Variable para controlar el valor de salida de la terminación del proceso
		int exitVal;
		
		//Creación de las listas con los comandos
		while ((linea_com = br.readLine()) != null) {
			comando.add("CMD");
			comando.add("/C");
			
			
			StringTokenizer st = new StringTokenizer(linea_com, " ");
			while (st.hasMoreTokens()) {
				
			}
			
			Object p;
			//Salida normal
			InputStream is = p.getInputStream();
			InputStreamReader isr2 = new InputStreamReader(is);
			BufferedReader br2 = new BufferedReader(isr2);
			
			String resultado = null;
			while ((resultado = br2.readLine()) !=null) {
				bw.write(resultado + "\n");
			}
			
			//Salida error
			InputStream ise = p.getErrorStream();
			InputStreamReader isre2 = new InputStreamReader(is);
			BufferedReader bre2 = new BufferedReader(isre2);
			
			String resultadoe = null;
			while ((resultadoe = br2.readLine()) !=null) {
				bw.write(resultadoe + "\n");
			}
			
			//Antes de pasar al siguiente comando se eliminan todos los elementos anteiriores de la lista de candenas
			comando.clear();
			
		}
		
		//Cierre de canalsd/flujos; de no hacerse no funcionará correctamente el programa
		bw.close();
		bw_e.close();
		br.close();
		
		

		
	}

}
